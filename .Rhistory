plotSimulation(simulationA)
View(simulationA)
min(simulationA)
?colors
max(simulationA)
max(simulationA)-min(simulationA)
(max(simulationA)-min(simulationA))/5
2000/62
(simulationA - min(simulationA)) / (max(simulationA) - min(simulationA))
(simulationA - min(simulationA)) / (max(simulationA) - min(simulationA))*2+1
simulationA
min(simulationA)
2000-1686
1782/314
plotSimulation(reducedMat)
image(t(matrix[rev(rows), ]), main = "SIR Model", xlab = "Heatmap of SIR Model. Darker cells are more likely to be infected")
#method to plot a matrix
plotSimulation = function(matrix)
{
rows = seq(nrow(A))
image(t(matrix[rev(rows), ]), main = "SIR Model", xlab = "Heatmap of SIR Model. Darker cells are more likely to be infected")
}
#we want 3 colors, 3 numbers based on min, max of SimulationA
reducedMat = (simulationA - min(simulationA)) / (max(simulationA) - min(simulationA))*2+1
plotSimulation(reducedMat)
View(reducedMat)
image(t(matrix[rev(rows), ]), main = "SIR Model", xlab = "Heatmap of SIR Model. Darker cells are more likely to be infected", color = "colorBlindness::LightBlue2DarkBlue7Steps")
#method to plot a matrix
plotSimulation = function(matrix)
{
rows = seq(nrow(A))
image(t(matrix[rev(rows), ]), main = "SIR Model", xlab = "Heatmap of SIR Model. Darker cells are more likely to be infected", color = "colorBlindness::LightBlue2DarkBlue7Steps")
}
#we want 3 colors, 3 numbers based on min, max of SimulationA
reducedMat = (simulationA - min(simulationA)) / (max(simulationA) - min(simulationA))*2+1
plotSimulation(reducedMat)
pallete()
palette()
?palette
#method to plot a matrix
plotSimulation = function(matrix)
{
col = c("#B3E0A6", "#8CCE7D", "#6DB562" , "#3B8A4A", "#24693D")
rows = seq(nrow(A))
image(t(matrix[rev(rows), ]), main = "SIR Model", xlab = "Heatmap of SIR Model. Darker cells are more likely to be infected", color = col )
}
#we want 3 colors, 3 numbers based on min, max of SimulationA
reducedMat = (simulationA - min(simulationA)) / (max(simulationA) - min(simulationA))*4+1
plotSimulation(reducedMat)
plotSimulation(reducedMat)
#method to plot a matrix
plotSimulation = function(matrix)
{
col = c("#B3E0A6", "#8CCE7D", "#6DB562" , "#3B8A4A", "#24693D")
rows = seq(nrow(A))
image(t(matrix[rev(rows), ]), main = "SIR Model", xlab = "Heatmap of SIR Model. Darker cells are more likely to be infected", color = col )
}
#we want 3 colors, 3 numbers based on min, max of SimulationA
reducedMat = (simulationA - min(simulationA)) / (max(simulationA) - min(simulationA))*4+1
plotSimulation(reducedMat)
reducedMat
#method to plot a matrix
plotSimulation = function(matrix)
{
col = c("#B3E0A6", "#8CCE7D", "#6DB562" , "#3B8A4A", "#24693D")
rows = seq(nrow(A))
image(t(matrix[rev(rows), ]), main = "SIR Model", xlab = "Heatmap of SIR Model. Darker cells are more likely to be infected", color = "#B3E0A6", "#8CCE7D", "#6DB562" , "#3B8A4A", "#24693D")
}
#we want 3 colors, 3 numbers based on min, max of SimulationA
reducedMat = (simulationA - min(simulationA)) / (max(simulationA) - min(simulationA))*4+1
plotSimulation(reducedMat)
View(reducedMat)
round(2.3)
#we want 3 colors, 3 numbers based on min, max of SimulationA
reducedMat = round((simulationA - min(simulationA)) / (max(simulationA) - min(simulationA))*4+1)
plotSimulation(reducedMat)
is.na(reducedMat)
all(is.na(reducedMat))
any(is.na(reducedMat))
is.na(reducedMat)
is.na(simulationA)
any(is.na(simulationA))
any(is.na(reducedMat))
#method to plot a matrix
plotSimulation = function(matrix)
{
col = c("#B3E0A6", "#8CCE7D", "#6DB562" , "#3B8A4A", "#24693D")
rows = seq(nrow(A))
image(t(matrix[rev(rows), ]), main = "SIR Model", xlab = "Heatmap of SIR Model. Darker cells are more likely to be infected", color = col())
}
plotSimulation(reducedMat)
#method to plot a matrix
plotSimulation = function(matrix)
{
col = c("#B3E0A6", "#8CCE7D", "#6DB562" , "#3B8A4A", "#24693D")
rows = seq(nrow(A))
image(t(matrix[rev(rows), ]), main = "SIR Model", xlab = "Heatmap of SIR Model. Darker cells are more likely to be infected", color = col)
}
plotSimulation(reducedMat)
#method to plot a matrix
plotSimulation = function(matrix)
{
c2 = c("#B3E0A6", "#8CCE7D", "#6DB562" , "#3B8A4A", "#24693D")
rows = seq(nrow(A))
image(t(matrix[rev(rows), ]), main = "SIR Model", xlab = "Heatmap of SIR Model. Darker cells are more likely to be infected", color = c2)
}
#method to plot a matrix
plotSimulation = function(matrix)
{
c2 = c("#B3E0A6", "#8CCE7D", "#6DB562" , "#3B8A4A", "#24693D")
rows = seq(nrow(A))
image(t(matrix[rev(rows), ]), main = "SIR Model", xlab = "Heatmap of SIR Model. Darker cells are more likely to be infected", color = c2)
}
plotSimulation(reducedMat)
t1 = plotSimulation(reducedMat)
t1
plotSimulation(reducedMat)
#method to plot a matrix
plotSimulation = function(matrix)
{
c2 = c("#B3E0A6", "#8CCE7D", "#6DB562" , "#3B8A4A", "#24693D")
rows = seq(nrow(A))
image(t(matrix[rev(rows), ]), col = c2, main = "SIR Model", xlab = "Heatmap of SIR Model. Darker cells are more likely to be infected")
}
plotSimulation(reducedMat)
View(reducedMat)
#we want 3 colors, 3 numbers based on min, max of SimulationA
reducedMat = (simulationA - min(simulationA)) / (max(simulationA) - min(simulationA))*4+1
plotSimulation(reducedMat)
library (tidyverse)
infeciones = tibble(
iterations = numeric(0),
probability = numeric(0),
proportionInfected= numeric(0)
)
counter =0
while(counter<1000)
{
#create random probability
prob = runif(1)
#simulate infection
lista = simulate_sir(A, prob)
#add list to our dataset
infeciones = add_row(infeciones, iterations = lista$iterations,probability = lista$probability, proportionInfected = lista$proportion
)
counter = counter+1
}
ggplot(infeciones, aes(x = probability, y =proportionInfected, color = iterations))+
geom_point()+
labs (title = "SIR Model performed with 1000 different probabilities")
midInfection = infeciones |> filter(proportionInfected >0.05 & proportionInfected<.95)
#perform a model
mod = lm(proportionInfected ~ probability, data= midInfection)
pred = predict(mod, midInfection)
midInfection = midInfection |> mutate(prediction = pred)
ggplot(midInfection)+
geom_point(aes(x = probability, y =proportionInfected, color = iterations))+
geom_line(aes(x = probability, y = pred))+
labs (title = "SIR Model with only 0.05 < proportionInfected <0.95.\n with model  ")
ggplot(infeciones, aes(x = proportionInfected, y =probability, color = iterations))+
geom_point()+
labs (title = "SIR Model performed with 1000 different probabilities")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
plot_infection(x2)
#write what you'd like to be able to do as the user first
plot_infection1(x2, col = c("white" , "purple" , "black"))
plot_infection1 = function(x, vec)
{
image(x, zlim=c(0,2), vec)
}
#write what you'd like to be able to do as the user first
plot_infection1(x2, col = c("white" , "purple" , "black"))
plot_infection1 = function(x, vec)
{
image(x, zlim=c(0,2), col =vec)
}
#write what you'd like to be able to do as the user first
plot_infection1(x2, col = c("white" , "purple" , "black"))
#write what you'd like to be able to do as the user first
plot_infection1(x2, col = c("white" , "purple" , "black"))
#write what you'd like to be able to do as the user first
plot_infection1(x2, col = c("white" , "purple" , "black"))
plot_infection1 = function(x, col = c("white" , "red" , "gray"))
{
image(x, zlim=c(0,2), col =col)
}
#write what you'd like to be able to do as the user first
plot_infection1(x2, col = c("white" , "purple" , "black"))
?image
plot_infection1 = function(x, xlab, col = c("white" , "red" , "gray"))
{
image(x, zlim=c(0,2), col =col, xlab = xlab)
}
#i want to control the xlabel from the function
plot_infection1(x2, xlab= "city block", col = c("white" , "purple" , "black"))
#i want to control the xlabel from the function
plot_infection1(x2, xlab= "city block", col = c("white" , "purple" , "black"))
#i want to control the xlabel from the function
plot_infection1(x2, xlab= "city block", col = c("white" , "purple" , "black"))
plot_infection1 = function(x, xlab ="", ylab = "", col = c("white" , "red" , "gray"))
{
image(x, zlim=c(0,2), col =col, xlab = xlab, ylab = ylab)
}
#i want to control the xlabel from the function
plot_infection1(x2, xlab= "city block", col = c("white" , "purple" , "black"))
?image
plot_infection1 = function(x, xlab ="", ylab = "", col = c("white" , "red" , "gray"), main ="", sub ="")
{
image(x, zlim=c(0,2), col =col, xlab = xlab, ylab = ylab, main = main)
}
#i want to control the xlabel from the function
plot_infection1(x2, xlab= "city block", col = c("white" , "purple" , "black"),
main = "1-step", sub = "bruh")
plot_infection1 = function(x, xlab ="", ylab = "", col = c("white" , "red" , "gray"), main ="", sub ="")
{
image(x, zlim=c(0,2), col =col, xlab = xlab, ylab = ylab, main = main, sub =sub)
}
#i want to control the xlabel from the function
plot_infection1(x2, xlab= "city block", col = c("white" , "purple" , "black"),
main = "1-step", sub = "bruh")
plot_infection1(x2, col = c("white" , "purple" , "black"), ...)
#write what you'd like to be able to do as the user first
plot_infection1(x2, col = c("white" , "purple" , "black"))
#... means pass trhough every other argument
image(z, zlim(0,2), col = col, ...)
plot_infection1(x2, xlab= "city block", col = c("white" , "purple" , "black"),
main = "1-step", sub = "bruh")
#as a user, we know x, x2 represents an infection state
#we know plot() can do different things depending on the object
plot(x2)
#define a *new* s3 plot method
plot.SIRmatrix = plot_infection
#works
plot(x2)
source("C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes16_Packages.R")
source("C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes16_Packages.R")
#method to plot a matrix
plotMatrix = function(matrix)
{
rows = seq(nrow(A))
image(t(matrix[rev(rows), ]), col = c("white", "red" , "grey"), main = "SIR Model", xlab = "Note: One immune person was placed so all colors would be imaged")
}
#method to infect corners of a matrix
cornerInfection = function(row = 20, col =30)
{
#create matrix
A= matrix(0, nrow= row, ncol = col)
#infect corners
A[1,1] = 1
A[1, col] =1
A[row, 1] =1
A[row,col] =1
#return matrix
return(A)
}
A = cornerInfection()
step <- function(x, prob)
{
# make a slightly bigger matrix, so we don't have to worry about the boundaries.
nr2 = nrow(x) + 2
nc2 = ncol(x) + 2
x2 <- matrix(0, nrow = nr2, ncol = nc2)
infected <- which(x == 1, arr.ind = TRUE) + 1
ni <- nrow(infected)
directions <- c(-1, 0, 1)
# Don't worry about cells that are already infected or removed
for(i in directions){
for(j in directions){
infect_ij <- infected
infect_ij[, "row"] <- infect_ij[, "row"] + i
infect_ij[, "col"] <- infect_ij[, "col"] + j
new_inf_rows <- sample(c(TRUE, FALSE), size = ni,
prob = c(prob, 1-prob), replace = TRUE)
new_infect <- infect_ij[new_inf_rows, , drop= FALSE]
x2[new_infect] <- 1
}
}
# Remove the edges from the too big matrix
result <- x2[-c(1, nr2), -c(1, nc2)]
# Fix the cells that are already infected or removed
result[1 <= x] <- 2
result
}
#continously loop function until no more cells are infected
simulate_sir = function(A, prob)
{
#disease is alive if there is any 1's.
diseaseAlive = any(A==1)
i =0
#while the disease continues...
while(diseaseAlive)
{
A = step(A, prob)
diseaseAlive = any(A==1)
i =i+1
}
#plot matrix
#plotMatrix(A)
proportionInfected = sum(A==2)/(nrow(A)*ncol(A))
lista= list(iterations =i,
probability = prob,
proportion= proportionInfected,
matrix = A)
return(lista)
}
simulate_sir(A, 0.47)
#each run of the function, add the values to a parent matrix. we will plot to see which cells get infected the most
#create parent matrix. default args of 20x30
simulationA = matrix(0, nrow= 20, ncol = 30)
#simulate the infected 1000 times.
counter =0
while(counter<1000)
{
#simulate infection
lista = simulate_sir(A, 0.40)
simulationA = simulationA + lista$matrix
counter = counter+1
}
#aside from the heatmap, we want to get the cells that are most likely to be infected.
#turn to vector(flatten). create a set so only unique values
simulationVector = unique(as.vector(simulationA))
#get the highest values from decreasing order. sort
highestValues = sort(simulationVector, decreasing = TRUE)
#only get the top 10 highest values
highestValues = highestValues[1:10]
#get indices in matrix where it matches those values
highestIndex = which(simulationA[] == highestValues, arr.ind = TRUE)
#print highest indexes
print("Indeces where it is most likely to be infected: ")
print(highestIndex)
#method to plot a matrix
plotSimulation = function(matrix)
{
c2 = c("#B3E0A6", "#8CCE7D", "#6DB562" , "#3B8A4A", "#24693D")
rows = seq(nrow(A))
image(t(matrix[rev(rows), ]), col = c2, main = "SIR Model", xlab = "Heatmap of SIR Model. Darker cells are more likely to be infected")
}
#we want 5 colors, 5 numbers based on min, max of SimulationA
reducedMat = (simulationA - min(simulationA)) / (max(simulationA) - min(simulationA))*4+1
plotSimulation(reducedMat)
library (tidyverse)
infeciones = tibble(
iterations = numeric(0),
probability = numeric(0),
proportionInfected= numeric(0)
)
counter =0
while(counter<1000)
{
#create random probability
prob = runif(1)
#simulate infection
lista = simulate_sir(A, prob)
#add list to our dataset
infeciones = add_row(infeciones, iterations = lista$iterations,probability = lista$probability, proportionInfected = lista$proportion
)
counter = counter+1
}
ggplot(infeciones, aes(x = probability, y =proportionInfected, color = iterations))+
geom_point()+
labs (title = "SIR Model performed with 1000 different probabilities")
midInfection = infeciones |> filter(proportionInfected >0.05 & proportionInfected<.95)
#perform a model
mod = lm(proportionInfected ~ probability, data= midInfection)
pred = predict(mod, midInfection)
midInfection = midInfection |> mutate(prediction = pred)
ggplot(midInfection)+
geom_point(aes(x = probability, y =proportionInfected, color = iterations))+
geom_line(aes(x = probability, y = pred))+
labs (title = "SIR Model with only 0.05 < proportionInfected <0.95.\n with model  ")
install.packages("devtools")
library(devtools)
create_package("SIR")
install.packages("shiny")
library(shiny)
runExample("01_hello")
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runExample("02_text")
runExample("07_widgets")
runExample("04_mpg")
runExample("03_reactivity")
runExample("06_tabsets")
runExample("08_html")
runExample("09_upload")
runExample("10_download")
runExample("11_timer")
using(devtools)
use(devtools)
library(devtools)
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runExample("01_hello")
runExample("11_timer")
runExample("06_tabsets")
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
?numericInput
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
?sidebarPanel
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
?actionButton
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
runApp('C:/Users/Julian/OneDrive/Escuela/Fall23/STAT128/Notes19_ShinyApp.R')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(SIR)
A =random_infect (10,10, 0.25)
A
library(SIR)
infect_corner(10,10)
library(SIR)
plot(A, main = "SIR Model", frame.plot =TRUE )
library(SIR)
A =step(A, 0.15)
plot(A)
listA = simulate_sir(A, 0.2)
subTitle = sprintf("Proportion Infected: %f\nIterations: %d" ,
listA$proportion , listA$iterations)
plot(listA$matrix, main= "SIR Model", sub= subTitle)
summary(A)
listA = simulate_sir(A, 0.2)
subTitle = sprintf("Proportion Infected: %f\nIterations: %d" ,
listA$proportion , listA$iterations)
plot(listA$matrix, main= "SIR Model", sub= subTitle)
test = function(i)
{
i = i+5
return("hey")
}
test(h)
h = 5
test(h)
test = function(i)
{
i = i+5
}
h = 5
test(h)
test = function(i)
{
i = i+5
}
test(h)
test(h)
test = function(i)
{
i = i+5
return(i)
}
test(h)
summary(lista$matrix)
summary(listA$matrix)
library(devtools)
check()
getwd()
setwd("C:\\Users\\Julian\\OneDrive\\Documents\\SIR")
check()
build()
document()
library(sor)
library(sir)
library(sir)
library(SIR)
?step
?plot
?SIR:plot
?SIR:::plot
?infect_corner
